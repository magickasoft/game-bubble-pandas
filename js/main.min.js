var o8V = {
    'j': "Art/GameScene/GameScene_Rojo",
    'C9': "Art/GameScene/FuentesPuntaje/GameScene_CyanFont",
    'j9': "Art/GameScene/Fuentes/GameScene_LevelFont",
    'L9': "Art/Animacion/Hamster6/Hamster6Data",
    'r1': "Art/Animacion/Hamster3/Hamster3Data",
    'x1': 640,
    'A': "pagehide",
    'P1': "Art/GameScene/Fuentes/GameScene_FuenteRoja",
    'B1': "Art/GameScene/FuentesPuntaje/GameScene_MagentaFont",
    'w': "Art/Animacion/Hamster5/Hamster5Data",
    'u': false,
    'w1': true,
    'T9': "Art/GameScene/FuentesPuntaje/GameScene_OrangeFont",
    'K1': "Art/MenuScene/CuadroNegro",
    'P': "Art/LoadingScene/RotacionMovil",
    'K9': ",minimum-scale=",
    'l1': 'orientationchange',
    'q': "Art/Particulas/Particulas_BurbujaGreen",
    'o': "Art/Animacion/LogoHamster/LogoData",
    'E': "Art/LoadingScene/CirculoCarga",
    'L': 0,
    'p': "Art/MenuScene/Fuentes/Tienda_Texto",
    'M1': ",maximum-scale=",
    'h': "Art/Animacion/Hamster7/Hamster7Data",
    'b9': "Art/Particulas/Particulas_BurbujaRed",
    'm9': "Art/MenuScene/Fuentes/Tienda_FuenteRoja",
    'N1': "Art/Particulas/Particulas_BurbujaCyan",
    'W1': "Art/Animacion/Hamster1/Hamster1Data",
    'y9': "Art/MenuScene/MenuScene",
    'o9': "width=device-width,initial-scale=",
    'B9': "Art/MenuScene/FondoMenu",
    'h9': "content",
    'T': "Art/GameScene/FuentesPuntaje/GameScene_BlueFont",
    'R': "Art/GameScene/GameScene_CuadroBlanco",
    'S9': "viewport",
    'G1': "Art/GameScene/Fuentes/GameScene_BonusFont",
    'Q1': "Art/Animacion/Hamster4/Hamster4Data",
    'e9': "Art/Particulas/Particulas_BurbujaMagenta",
    'X': "Art/GameScene/GameScene",
    'C1': 320,
    'D1': 'load',
    'v1': "focus",
    'X1': "Art/GameScene/GameScene_EstrellaParticula",
    't': ".fnt",
    'c9': '',
    'k9': 'resize',
    'z1': "Art/GameScene/FuentesPuntaje/GameScene_GreenFont",
    'B': 5,
    'v9': 'visibilitychange',
    'T1': "Art/GameScene/Burbujas",
    'i1': "Art/LoadingScene/LoadingScene",
    'R1': "Art/GameScene/GameScene_Blanco",
    'D': "pageshow",
    'I9': "Art/GameScene/Fuentes/GameScene_NumerosPuntaje",
    'F1': "Art/GameScene/FuentesPuntaje/GameScene_Hits",
    'f1': ",minimal-ui",
    'V9': "Art/GameScene/Fuentes/GameScene_Nivel",
    'g1': "absolute",
    'b1': "en-US",
    'Y9': "Art/PatronFondo",
    'j1': "Art/Particulas/Particulas_BurbujaBlue",
    'F': "Art/GameScene/GameScene_CirculoParticula",
    'z': 1,
    'H1': "Art/GameScene/FuentesPuntaje/GameScene_RedFont",
    'G9': "Art/Particulas/Particulas_BurbujaYellow",
    'a9': "-hd",
    'n9': "Art/GameScene/GameScene_Cuerda",
    'F9': "keydown",
    't1': "blur",
    'c1': ".json",
    'x9': 460,
    'q1': "Art/CortinaHamster",
    'S1': "Art/Particulas/Particulas_BurbujaOrange",
    'G': "",
    'R9': "Art/Tutorial/Tutorial",
    'f9': "Art/GameScene/Fuentes/GameScene_FuenteBlanca",
    'J9': ".png",
    'U1': "Art/LoadingScene/LoadingScene_FontWhite",
    'q9': "Art/Animacion/Hamster2/Hamster2Data",
    'U': 480,
    'Y1': 'ready',
    'I1': "Art/MenuScene/Fuentes/Tienda_FuenteObjeto",
    'Y': 920,
    'U9': "Art/MenuScene/Fuentes/Tienda_FuenteVerde",
    'g9': "0px",
    'g': "Art/GameScene/FuentesPuntaje/GameScene_YellowFont",
    'S': '576742227280294087',
    'M9': "Art/LoadingScene/LoadingScene_FontBlack"
};
function getHiddenProp() {
    var e1 = null 
      , s9 = 'Hidden'
      , h1 = 'hidden'
      , v = 'o'
      , r = 'ms'
      , E9 = 'moz'
      , Z = 'webkit'
      , prefixes = [Z, E9, r, v];
    if (h1 in document)
        return h1;
    for (var i = o8V.L; i < prefixes.length; i++) {
        if ((prefixes[i] + s9) in document)
            return prefixes[i] + s9;
    }
    return e1;
}
function continueLoading() {
    setLocale();
    gameEngine.preload();
    var preloader = new PIXI.AssetLoader(assetsLoading);
    preloader.onComplete = onAssetsPreloaded;
    preloader.load();
    requestAnimFrame(update);
    resize();
}
function setLocale() {
    $.getJSON('./locale/en-US.json', function(data) {
        _.setTranslation(data);
    }
    );
}
function fnResume() {
    if (gameEngine) {
        if (!gameEngine.userStorage.isSoundsMute)
            Howler.mute(o8V.u);
        gameEngine.unpause();
    }
}
function onAssetsPreloaded() {
    var p9 = 1400
      , N9 = 32000
      , W9 = 1800
      , d9 = 30000
      , l9 = 28000
      , d1 = 1700
      , W = 26000
      , k = 1900
      , I = 24000
      , u1 = 23000
      , Z9 = 3800
      , C = 19000
      , Z1 = 18000
      , t9 = 17000
      , N = 16000
      , O = 15000
      , s1 = 14000
      , L1 = 13000
      , z9 = 12000
      , f = 11000
      , J = 10000
      , l = 200
      , O1 = 9000
      , H9 = 8000
      , A9 = 7000
      , o1 = 6000
      , D9 = 300
      , i9 = 5000
      , H = 400
      , p1 = 4000
      , r9 = 900
      , M = 3000
      , n = 800
      , a1 = 2000
      , E1 = 1500
      , y1 = 'SFX/sfx.mp3'
      , m1 = 'SFX/sfx.ogg'
      , A1 = 'SFX/limit.mp3'
      , u9 = 'SFX/limit.ogg'
      , V1 = 'SFX/gameover.mp3'
      , P9 = 'SFX/gameover.ogg'
      , k1 = 'SFX/ingame.mp3'
      , J1 = 'SFX/ingame.ogg'
      , n1 = 'SFX/menu.mp3'
      , X9 = 'SFX/menu.ogg';
    gameEngine.startLoading();
    if (gameEngine.isMobile.Windows()) {
        menuMusic = gameMusic = gameoverMusic = limitMusic = sounds = {
            play: function(a) {},
            once: function(a, b) {},
            stop: function() {},
            fade: function(a, b, c) {},
            seek: function() {
                return 0;
            },
            volume: function(a) {}
        };
        var i = soundsToLoad;
        while (i > o8V.L) {
            onAssetsProgress();
            i--;
        }
    } else {
        menuMusic = new Howl({
            src: [X9, n1],
            loop: o8V.w1,
            onload: onAssetsProgress,
            onloaderror: onAssetsProgress
        });
        gameMusic = new Howl({
            src: [J1, k1],
            loop: o8V.w1,
            onload: onAssetsProgress,
            onloaderror: onAssetsProgress
        });
        gameoverMusic = new Howl({
            src: [P9, V1],
            loop: o8V.u,
            onload: onAssetsProgress,
            onloaderror: onAssetsProgress
        });
        limitMusic = new Howl({
            src: [u9, A1],
            loop: o8V.w1,
            onload: onAssetsProgress,
            onloaderror: onAssetsProgress
        });
        sounds = new Howl({
            src: [m1, y1],
            sprite: {
                logo_voice: [o8V.L, E1],
                ready: [a1, n],
                go: [M, r9],
                ok_accept: [p1, H],
                cancel_close: [i9, D9],
                select_hamster: [o1, r9],
                shoot_bubble: [A9, D9],
                swap_bubble: [H9, D9],
                clash_bubble: [O1, l],
                explode_bubble: [J, l],
                match_1: [f, r9],
                match_2: [z9, r9],
                match_3: [L1, r9],
                match_4: [s1, r9],
                match_5: [O, r9],
                match_6: [N, r9],
                match_7: [t9, r9],
                new_row: [Z1, D9],
                shake_slow: [C, Z9],
                shake_fast: [u1, r9],
                star_appear: [I, k],
                star_explode: [W, d1],
                explode_all_bubbles: [l9, k],
                match_break: [d9, W9],
                transition: [N9, p9]
            },
            onload: onAssetsProgress,
            onloaderror: onAssetsProgress
        });
    }
    resize();
}
function onAssetsLoaded() {
    gameEngine.readyToPlay();
    resize();
}
function onAssetsInitloaded() {
    //gameEngine.apiInstance.Branding.displaySplashScreen(continueLoading);
}
function onVisibilityChange(event) {
    if (isHidden()) {
        fnPause();
    } else {
        fnResume();
    }
}
function isHidden() {
    var prop = getHiddenProp();
    if (!prop)
        return o8V.u;
    return document[prop];
}
function resize() {
    var widthToHeight = defaultWidth / defaultHeight, newWidthToHeight = window.innerWidth / window.innerHeight, gameWidth, gameHeight;
    if (newWidthToHeight > widthToHeight) {
        gameWidth = defaultHeight * newWidthToHeight;
        gameHeight = defaultHeight;
    } else {
        gameWidth = defaultWidth;
        gameHeight = defaultWidth / newWidthToHeight;
    }
    renderer.resize(window.innerWidth, window.innerHeight);
    document.body.style.width = window.innerWidth + 'px';
    document.body.style.height = window.innerHeight + 'px';
    gameEngine.resize(gameWidth, gameHeight);
    var ratio = Math.min(window.innerWidth / gameWidth, window.innerHeight / gameHeight);
    gameEngine.rootContainer.scale.x = ratio;
    gameEngine.rootContainer.scale.y = ratio;
    window.scrollTo(o8V.L, o8V.L);
    document.body.scrollTop = o8V.L;
}
function backingScale() {
    var O9 = 'devicePixelRatio';
    if (O9 in window) {
        if (window.devicePixelRatio > o8V.z) {
            return window.devicePixelRatio;
        }
    }
    return o8V.z;
}
function fnPause() {
    Howler.mute(o8V.w1);
    if (gameEngine)
        gameEngine.pause();
}
function update() {
    var Q = 1000;
    if (gameEngine.DEBUG) {
        stats.begin();
    }
    var now = Date.now()
      , dt = (now - lastUpdate) / Q;
    lastUpdate = now;
    requestAnimFrame(update);
    gameEngine.update(dt);
    renderer.render(gameEngine.stage);
    if (gameEngine.DEBUG) {
        stats.end();
    }
}
function onAssetsProgress() {
    if (soundsLoaded < soundsToLoad) {
        soundsLoaded++;
        if (soundsLoaded >= soundsToLoad) {
            var loader = new PIXI.AssetLoader(assetsToLoader);
            loader.onProgress = onAssetsProgress;
            loader.onComplete = onAssetsLoaded;
            loader.load();
        }
    } else {
        assetsLoaded++;
    }
    gameEngine.scenes[GAME_MODE.LOADING].setFactor(Math.min(Math.max(((o8V.z) / ((assetsToLoader.length + soundsToLoad) - 0)) * ((assetsLoaded + soundsLoaded) - 0) + 0, 0), 1));
}
var defaultWidth = o8V.x1
  , defaultHeight = o8V.Y
  , artSuffix = o8V.a9
  , locale = o8V.b1
  , localeActual = navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || locale
  , lastUpdate = Date.now();
if (screen.height * backingScale() <= o8V.U || screen.width * backingScale() <= o8V.U) {
    defaultWidth = o8V.C1;
    defaultHeight = o8V.x9;
    artSuffix = o8V.G;
}
var assetsToInitloader = [o8V.E + artSuffix + o8V.J9, o8V.K1 + artSuffix + o8V.J9, o8V.Y9 + artSuffix + o8V.J9, o8V.P + artSuffix + o8V.J9], assetsLoading = [o8V.i1 + artSuffix + o8V.c1], assetsToLoader = [o8V.X + artSuffix + o8V.c1, o8V.T1 + artSuffix + o8V.c1, o8V.y9 + artSuffix + o8V.c1, o8V.B9 + artSuffix + o8V.J9, o8V.R9 + artSuffix + o8V.c1, o8V.o + artSuffix + o8V.c1, o8V.R9 + artSuffix + o8V.c1, o8V.W1 + artSuffix + o8V.c1, o8V.q9 + artSuffix + o8V.c1, o8V.r1 + artSuffix + o8V.c1, o8V.Q1 + artSuffix + o8V.c1, o8V.w + artSuffix + o8V.c1, o8V.L9 + artSuffix + o8V.c1, o8V.h + artSuffix + o8V.c1, o8V.q1 + artSuffix + o8V.J9, o8V.R + artSuffix + o8V.J9, o8V.j + artSuffix + o8V.J9, o8V.R1 + artSuffix + o8V.J9, o8V.n9 + artSuffix + o8V.J9, o8V.I1 + artSuffix + o8V.t, o8V.m9 + artSuffix + o8V.t, o8V.U9 + artSuffix + o8V.t, o8V.p + artSuffix + o8V.t, o8V.G1 + artSuffix + o8V.t, o8V.V9 + artSuffix + o8V.t, o8V.f9 + artSuffix + o8V.t, o8V.P1 + artSuffix + o8V.t, o8V.I9 + artSuffix + o8V.t, o8V.j9 + artSuffix + o8V.t, o8V.T + artSuffix + o8V.t, o8V.C9 + artSuffix + o8V.t, o8V.z1 + artSuffix + o8V.t, o8V.B1 + artSuffix + o8V.t, o8V.T9 + artSuffix + o8V.t, o8V.H1 + artSuffix + o8V.t, o8V.g + artSuffix + o8V.t, o8V.F1 + artSuffix + o8V.t, o8V.M9 + artSuffix + o8V.t, o8V.U1 + artSuffix + o8V.t, o8V.j1 + artSuffix + o8V.J9, o8V.N1 + artSuffix + o8V.J9, o8V.q + artSuffix + o8V.J9, o8V.e9 + artSuffix + o8V.J9, o8V.S1 + artSuffix + o8V.J9, o8V.b9 + artSuffix + o8V.J9, o8V.G9 + artSuffix + o8V.J9, o8V.F + artSuffix + o8V.J9, o8V.X1 + artSuffix + o8V.J9], assetsLoaded = o8V.L, widthToHeight = defaultWidth / defaultHeight, newWidthToHeight = window.innerWidth / window.innerHeight, gameWidth, gameHeight;
if (newWidthToHeight > widthToHeight) {
    gameWidth = defaultHeight * newWidthToHeight;
    gameHeight = defaultHeight;
} else {
    gameWidth = defaultWidth;
    gameHeight = defaultWidth / newWidthToHeight;
}
var renderer = PIXI.autoDetectRecommendedRenderer(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.view);
var gameEngine = new GAME.Engine(gameWidth,gameHeight)
  , ratio = Math.min(window.innerWidth / gameWidth, window.innerHeight / gameHeight);
gameEngine.rootContainer.scale.x = ratio;
gameEngine.rootContainer.scale.y = ratio;
if (gameEngine.DEBUG) {
    stats = new Stats();
    document.body.appendChild(stats.domElement);
    stats.domElement.style.position = o8V.g1;
    stats.domElement.style.top = o8V.g9;
}
var menuMusic, gameMusic, gameoverMusic, limitMusic, sounds, soundsToLoad = o8V.B, soundsLoaded = o8V.L, SpilData = {
    id: o8V.S
};
/*
GameAPI.loadAPI(function(apiInstance) {
    gameEngine.apiInstance = apiInstance;
    var logoData = apiInstance.Branding.getLogo();
    if (logoData.image)
        assetsToInitloader.push(logoData.image);
    var preloader = new PIXI.AssetLoader(assetsToInitloader);
    //preloader.onComplete = onAssetsInitloaded;
    preloader.crossorigin = o8V.w1;
    preloader.load();
}
, SpilData);*/

	var preloader = new PIXI.AssetLoader(assetsToInitloader);
	preloader.onComplete = continueLoading;
    preloader.crossorigin = o8V.w1;
    preloader.load();
	
var visProp = getHiddenProp();
if (visProp) {
    var evtname = visProp.replace(/[H|h]idden/, o8V.c9) + o8V.v9;
    document.addEventListener(evtname, onVisibilityChange);
}
window.addEventListener(o8V.A, function() {
    fnPause();
}
);
window.addEventListener(o8V.D, function() {
    fnResume();
}
);
window.addEventListener(o8V.t1, function() {
    fnPause();
}
);
window.addEventListener(o8V.v1, function() {
    fnResume();
}
);
window.addEventListener(o8V.k9, resize, o8V.u);
window.addEventListener(o8V.D1, resize, o8V.u);
document.addEventListener(o8V.Y1, resize, o8V.u);
window.addEventListener(o8V.l1, resize, o8V.u);
window.addEventListener(o8V.F9, function(e) {
    var K = 36
      , s = 35
      , m = 34
      , d = 33;
    if ([d, m, s, K].indexOf(e.keyCode) > -o8V.z) {
        e.preventDefault();
    }
}
, o8V.u);
$(document).on({
    "contextmenu": function(e) {
        e.preventDefault();
    }
});
document.getElementById(o8V.S9).setAttribute(o8V.h9, o8V.o9 + o8V.z / backingScale() + o8V.M1 + o8V.z / backingScale() + o8V.K9 + o8V.z / backingScale() + o8V.f1);
